pipeline {
  agent any

  tools {
    jdk 'java17016'
    maven 'maven399'
  }

  environment {
    SERVICE      = 'order-service'
    IMAGE_BASE   = "farmatodo/${SERVICE}"
    IMAGE_TAG    = "${BUILD_NUMBER}"
    IMAGE        = "${IMAGE_BASE}:${IMAGE_TAG}"

    PORT         = '8085'
    HOST         = '8085'
    NET          = 'farmatodo-network'

    SONAR_SCANNER_HOME = tool 'sonar7'

    // üì¶ Cach√© persistente para Trivy (evita descargar DB en cada build)
    TRIVY_CACHE_DIR = '/var/jenkins_home/.trivycache'
  }

  options {
    timestamps()
    timeout(time: 20, unit: 'MINUTES')
  }

  stages {

    // 1Ô∏è‚É£ Checkout & Build
    stage('Checkout & Build') {
      steps {
        echo "üì¶ Clonando repositorio desde GitHub..."
        checkout scmGit(
          branches: [[name: '*/main']],
          extensions: [],
          userRemoteConfigs: [[
            credentialsId: 'jenkins-gcp',
            url: 'https://github.com/santgodev/farmatodo-backend.git'
          ]]
        )

        dir(env.SERVICE) {
          echo "üß± Compilando y empacando ${SERVICE}..."
          sh "mvn -q -Dstyle.color=always clean package -DskipTests=false"
        }
      }
    }

    // 2Ô∏è‚É£ An√°lisis con SonarQube
    stage('SonarQube Analysis') {
      steps {
        echo "üîç Ejecutando an√°lisis est√°tico con SonarQube..."
        dir(env.SERVICE) {
          withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_TOKEN')]) {
            withSonarQubeEnv('sonar') {
              sh """
                ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                  -Dsonar.projectKey=${SERVICE} \
                  -Dsonar.sources=. \
                  -Dsonar.host.url=http://sonarqube-dind:9000 \
                  -Dsonar.java.binaries=target/classes \
                  -Dsonar.token=$SONAR_TOKEN
              """
            }
          }
        }
      }
    }

    // 3Ô∏è‚É£ Escaneo de dependencias con Trivy (fuente)
    stage('Trivy Source Scan') {
      steps {
        echo "üß© Escaneando dependencias con Trivy (fuente)..."
        dir(env.SERVICE) {
          sh """
            export TRIVY_CACHE_DIR=${TRIVY_CACHE_DIR}
            echo "üì¶ Usando cach√© de Trivy: ${TRIVY_CACHE_DIR}"

            trivy fs \
              --no-progress \
              --skip-update \
              --format table \
              --severity HIGH,CRITICAL \
              -o trivy-fs-report.txt \
              . || true
          """
        }
      }
    }

    // 4Ô∏è‚É£ Construcci√≥n y prueba local en Docker
    stage('Build Docker Image & Run Local') {
      steps {
        dir(env.SERVICE) {
          echo "üê≥ Construyendo imagen Docker local..."
          sh """
            docker build -t ${IMAGE} .
            docker network inspect ${NET} >/dev/null 2>&1 || docker network create ${NET}
            docker rm -f ${SERVICE} >/dev/null 2>&1 || true
            docker run -d --name ${SERVICE} --network ${NET} -p ${HOST}:${PORT} ${IMAGE}
            echo "‚úÖ ${SERVICE} ejecut√°ndose localmente en http://localhost:${HOST}"
          """
        }
      }
    }

    // 5Ô∏è‚É£ Escaneo de imagen con Trivy (optimizado)
    stage('Trivy Image Scan') {
      steps {
        echo "üîé Escaneando vulnerabilidades en la imagen Docker..."
        dir(env.SERVICE) {
          sh """
            export TRIVY_CACHE_DIR=${TRIVY_CACHE_DIR}
            echo "üì¶ Reutilizando cach√© de Trivy: ${TRIVY_CACHE_DIR}"

            trivy image \
              --no-progress \
              --skip-update \
              --light \
              --timeout 10m \
              --format table \
              --severity HIGH,CRITICAL \
              -o trivy-image-report.txt \
              ${IMAGE} || true
          """
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Build, an√°lisis y pruebas locales completadas con √©xito para ${SERVICE}!"
    }
    failure {
      echo "‚ùå Fall√≥ el pipeline de ${SERVICE}!"
    }
    always {
      echo "=========================================="
      echo "Service: ${SERVICE}"
      echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
      echo "Duration: ${currentBuild.durationString}"
      echo "=========================================="
      archiveArtifacts artifacts: "${SERVICE}/target/*.jar", allowEmptyArchive: true, fingerprint: true
      archiveArtifacts artifacts: "**/trivy-*.txt", allowEmptyArchive: true
    }
  }
}
