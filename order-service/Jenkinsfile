pipeline {
  agent any

  tools {
    jdk 'java17016'
    maven 'maven399'
  }

  environment {
    // ===== Servicio / Imagen local =====
    SERVICE      = 'order-service'
    IMAGE_BASE   = "farmatodo/${SERVICE}"
    IMAGE_TAG    = "${BUILD_NUMBER}"
    IMAGE        = "${IMAGE_BASE}:${IMAGE_TAG}"

    // ===== Red local (solo para dev local si lo usas) =====
    PORT         = '8085'
    HOST         = '8085'
    NET          = 'farmatodo-network'

    // ===== SonarQube =====
    SONAR_SCANNER_HOME = tool 'sonar7'

    // ===== GCP / Artifact Registry / Cloud Run =====
    GCP_PROJECT_ID = 'planar-momentum-469121-n0'
    REGION         = 'us-central1'
    REPOSITORY     = "${SERVICE}-repo"
    AR_HOST        = "${REGION}-docker.pkg.dev"
    FULL_IMAGE_NAME = "${AR_HOST}/${GCP_PROJECT_ID}/${REPOSITORY}/${SERVICE}:${IMAGE_TAG}"

    CR_SERVICE     = "${SERVICE}"
    CR_PLATFORM    = "managed"
    CR_CPU         = "1"
    CR_MEMORY      = "512Mi"
    CR_CONCURRENCY = "80"
    CR_MIN_INST    = "0"
    CR_MAX_INST    = "2"
    CR_PORT        = "${PORT}"
    CR_ALLOW_UNAUTH = "true"
  }

  options {
    timestamps()
    timeout(time: 20, unit: 'MINUTES')
  }

  stages {

    // 1) Checkout & Build
    stage('Checkout & Build') {
      steps {
        echo "üì¶ Clonando repositorio desde GitHub..."
        checkout scmGit(
          branches: [[name: '*/main']],
          extensions: [],
          userRemoteConfigs: [[
            credentialsId: 'jenkins-gcp',
            url: 'https://github.com/santgodev/farmatodo-backend.git'
          ]]
        )

        dir(env.SERVICE) {
          echo "üß± Compilando y empacando ${SERVICE}..."
          sh "mvn -q -Dstyle.color=always clean package -DskipTests=true"
        }
      }
    }

    // 2) SonarQube (SAST)
    stage('SonarQube Analysis') {
      steps {
        echo "üîç Ejecutando an√°lisis de c√≥digo con SonarQube..."
        dir(env.SERVICE) {
          withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_TOKEN')]) {
            withSonarQubeEnv('sonar') {
              sh """
                ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                  -Dsonar.projectKey=${SERVICE} \
                  -Dsonar.sources=. \
                  -Dsonar.host.url=http://sonarqube-dind:9000 \
                  -Dsonar.java.binaries=target/classes \
                  -Dsonar.token=$SONAR_TOKEN
              """
            }
          }
        }
      }
    }

    // 3) Trivy FS (antes del build Docker)
    stage('Trivy Source Scan') {
      steps {
        echo "üß© Escaneando dependencias y archivos con Trivy..."
        dir(env.SERVICE) {
          sh """
            trivy fs . \
              --format table \
              --severity HIGH,CRITICAL \
              -o trivy-fs-report.txt || true
          """
        }
      }
    }

    // 4) Docker build
    stage('Build Docker Image') {
      steps {
        dir(env.SERVICE) {
          echo "üê≥ Construyendo imagen Docker para ${SERVICE}..."
          sh "docker build -t ${IMAGE} ."
        }
      }
    }

    // 5) Trivy image
    stage('Trivy Image Scan') {
      steps {
        echo "üîé Escaneando imagen Docker con Trivy..."
        sh """
          echo "üìã Resultados del an√°lisis de ${IMAGE}"
          trivy image ${IMAGE} \
            --format table \
            --severity HIGH,CRITICAL \
            -o trivy-image-report.txt || true
        """
      }
    }

    // 6) Push a Artifact Registry
    stage('Push to Artifact Registry') {
      steps {
        echo "‚òÅÔ∏è Autenticando en GCP y empujando imagen a Artifact Registry..."
        withCredentials([file(credentialsId: 'gcp-credentials', variable: 'gcpCred')]) {
          withEnv(["GOOGLE_APPLICATION_CREDENTIALS=$gcpCred"]) {
            sh """
              echo "üîê Activando cuenta de servicio..."
              gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
              gcloud config set project "$GCP_PROJECT_ID"

              echo "üß≠ Configurando credenciales Docker para Artifact Registry (${AR_HOST})..."
              gcloud auth configure-docker "$AR_HOST" --quiet

              echo "üè∑Ô∏è Creando repositorio (idempotente) si no existe..."
              if ! gcloud artifacts repositories describe "$REPOSITORY" --location="$REGION" --project="$GCP_PROJECT_ID" >/dev/null 2>&1 ; then
                gcloud artifacts repositories create "$REPOSITORY" \
                  --repository-format=docker \
                  --location="$REGION" \
                  --description="Docker repo for $SERVICE" \
                  --project="$GCP_PROJECT_ID"
              fi

              echo "üè∑Ô∏è Etiquetando imagen local -> ${FULL_IMAGE_NAME}"
              docker tag "$IMAGE" "$FULL_IMAGE_NAME"

              echo "üì§ Pushing ${FULL_IMAGE_NAME}..."
              docker push "$FULL_IMAGE_NAME"
            """
          }
        }
      }
    }

    // 7) Deploy a Cloud Run
    stage('Deploy to Cloud Run') {
      steps {
        echo "üöÄ Desplegando ${SERVICE} en Cloud Run..."
        withCredentials([file(credentialsId: 'gcp-credentials', variable: 'gcpCred')]) {
          withEnv(["GOOGLE_APPLICATION_CREDENTIALS=$gcpCred"]) {
            sh """
              echo "üîê Activando cuenta de servicio..."
              gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
              gcloud config set project "$GCP_PROJECT_ID"

              echo "üöÄ gcloud run deploy ${CR_SERVICE}"
              gcloud run deploy "$CR_SERVICE" \
                --image="$FULL_IMAGE_NAME" \
                --region="$REGION" \
                --platform="$CR_PLATFORM" \
                --port="$CR_PORT" \
                --memory="$CR_MEMORY" \
                --cpu="$CR_CPU" \
                --concurrency="$CR_CONCURRENCY" \
                --min-instances="$CR_MIN_INST" \
                --max-instances="$CR_MAX_INST" \
                --allow-unauthenticated \
                --quiet
            """
          }
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Build, an√°lisis y despliegue completados con √©xito para ${SERVICE}!"
    }
    failure {
      echo "‚ùå Fall√≥ el pipeline de ${SERVICE}!"
    }
    always {
      echo "=========================================="
      echo "Service: ${SERVICE}"
      echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
      echo "Duration: ${currentBuild.durationString}"
      echo "=========================================="
      archiveArtifacts artifacts: "${SERVICE}/target/*.jar", allowEmptyArchive: true, fingerprint: true
      archiveArtifacts artifacts: "**/trivy-*.txt", allowEmptyArchive: true
    }
  }
}
