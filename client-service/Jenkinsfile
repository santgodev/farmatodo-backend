pipeline {
    agent any

    tools {
        jdk 'java17016'
        maven 'maven399'
    }

    environment {
        SERVICE = 'client-service'
        IMAGE   = "farmatodo/${SERVICE}:latest"
        PORT    = '8081'
        HOST    = '8081'
        NET     = 'farmatodo-network'
    }

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üì¶ Checking out source code..."
                checkout scm
            }
        }

        stage('Build & Package') {
            steps {
                dir(SERVICE) {
                    echo "üß± Building ${SERVICE}..."
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir(SERVICE) {
                    echo "üê≥ Building Docker image for ${SERVICE}..."
                    sh "docker build -t ${IMAGE} ."
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "üöÄ Deploying ${SERVICE}..."

                    sh """
                        docker network inspect ${NET} >/dev/null 2>&1 || docker network create ${NET}
                        docker rm -f ${SERVICE} >/dev/null 2>&1 || true

                        # Ejecutar contenedor con alias hacia el host de Windows
                        docker run -d --name ${SERVICE} \
                            --add-host=host.docker.internal:host-gateway \
                            -p ${HOST}:${PORT} \
                            --network ${NET} \
                            ${IMAGE}
                    """

                    echo "‚úÖ ${SERVICE} deployed successfully!"
                    sh "docker ps --filter name=${SERVICE}"
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Build and deploy completed successfully for ${SERVICE}!"
        }
        failure {
            echo "‚ùå Build or deployment failed for ${SERVICE}!"
        }
        always {
            echo "=========================================="
            echo "Service: ${SERVICE}"
            echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
            echo "Duration: ${currentBuild.durationString}"
            echo "=========================================="
            archiveArtifacts artifacts: "${SERVICE}/target/*.jar", allowEmptyArchive: true, fingerprint: true
        }
    }
}
