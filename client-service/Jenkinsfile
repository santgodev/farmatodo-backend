pipeline {
    agent any

    tools {
        jdk 'java17016'
        maven 'maven399'
    }

    environment {
        // üßæ Par√°metros generales
        SERVICE = 'client-service'
        IMAGE_NAME = "farmatodo/${SERVICE}"
        REGISTRY_CREDENTIALS = 'dockerhub-credentials'  // ID de credencial en Jenkins
        VERSION = "v${env.BUILD_NUMBER}"
        NET = 'farmatodo-network'
    }

    options {
        timestamps()
        timeout(time: 25, unit: 'MINUTES')
    }

    stages {
        // ===============================
        stage('Checkout') {
            steps {
                echo "üì¶ Clonando el repositorio..."
                checkout scm
            }
        }
        // ===============================
        stage('Build & Test') {
            steps {
                dir(SERVICE) {
                    echo "üß± Compilando y ejecutando tests de ${SERVICE}..."
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        // ===============================
        stage('Build Docker Image') {
            steps {
                dir(SERVICE) {
                    echo "üê≥ Construyendo imagen Docker para ${SERVICE}..."
                    sh """
                        docker build -t ${IMAGE_NAME}:${VERSION} .
                        docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:latest
                    """
                }
            }
        }
        // ===============================
        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "‚òÅÔ∏è Subiendo imagen a Docker Hub..."
                    withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker push ${IMAGE_NAME}:${VERSION}
                            docker push ${IMAGE_NAME}:latest
                            docker logout
                        """
                    }
                }
            }
        }
        // ===============================
        stage('Post-Build Info') {
            steps {
                echo "‚úÖ Imagen publicada:"
                echo "   - ${IMAGE_NAME}:${VERSION}"
                echo "   - ${IMAGE_NAME}:latest"
            }
        }
        // ===============================
        stage('Deploy (optional local/staging)') {
            when {
                expression { return params.DEPLOY_TO_LOCAL == true }
            }
            steps {
                echo "üöÄ Desplegando entorno local (docker-compose)..."
                sh "docker compose -f docker-compose.yml up -d"
            }
        }
    }

    post {
        success {
            echo "üéâ Build completado correctamente."
        }
        failure {
            echo "‚ùå Error en el pipeline."
        }
        always {
            echo """
==========================================
Service: ${SERVICE}
Version: ${VERSION}
Status: ${currentBuild.result ?: 'SUCCESS'}
Duration: ${currentBuild.durationString}
==========================================
"""
            archiveArtifacts artifacts: "${SERVICE}/target/*.jar", allowEmptyArchive: true, fingerprint: true
        }
    }
}
