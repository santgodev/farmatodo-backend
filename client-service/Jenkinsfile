pipeline {
    agent any

    tools {
        jdk 'java17016'
        maven 'maven399'
    }

    environment {
        SERVICE_NAME = 'client-service'
        PROJECT_NAME = 'farmatodo'
        DB_CONTAINER = 'test-postgres'
        DB_PORT = '5440'           
        DB_NAME = 'testdb'
        DB_USER = 'postgres'
        DB_PASSWORD = 'postgres'
    }

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Start Test Database') {
            steps {
                script {
                    echo "üêò Starting temporary PostgreSQL container for tests..."

                    // Stop any previous DB container if still running
                    sh '''
                        docker rm -f ${DB_CONTAINER} || true
                    '''

                    // Start a clean PostgreSQL instance
                    sh '''
                        docker run -d --name ${DB_CONTAINER} \
                            -e POSTGRES_DB=${DB_NAME} \
                            -e POSTGRES_USER=${DB_USER} \
                            -e POSTGRES_PASSWORD=${DB_PASSWORD} \
                            -p ${DB_PORT}:5432 postgres:15
                    '''

                    // Wait for DB to be ready
                    echo "‚è≥ Waiting for PostgreSQL to initialize..."
                    sh '''
                        for i in {1..10}; do
                            if docker exec ${DB_CONTAINER} pg_isready -U ${DB_USER} > /dev/null 2>&1; then
                                echo "‚úÖ PostgreSQL is ready!"
                                break
                            fi
                            echo "Waiting..."
                            sleep 3
                        done
                    '''
                }
            }
        }

        stage('Build & Test') {
            steps {
                dir("${env.SERVICE_NAME}") {
                    script {
                        echo "üèóÔ∏è Building ${env.SERVICE_NAME}..."

                        def dbUrl = "jdbc:postgresql://localhost:${env.DB_PORT}/${env.DB_NAME}"
                        sh """
                            mvn clean package \
                                -Dspring.datasource.url=${dbUrl} \
                                -Dspring.datasource.username=${env.DB_USER} \
                                -Dspring.datasource.password=${env.DB_PASSWORD} \
                                -Dspring.jpa.hibernate.ddl-auto=create-drop \
                                -B
                        """
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir("${env.SERVICE_NAME}") {
                    script {
                        echo "üê≥ Building Docker image..."
                        def imageName = "${env.PROJECT_NAME}/${env.SERVICE_NAME}:latest"
                        sh "docker build -t ${imageName} ."
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßπ Cleaning up test environment..."
                sh "docker rm -f ${DB_CONTAINER} || true"

                echo "=========================================="
                echo "Service: ${env.SERVICE_NAME}"
                echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
                echo "Duration: ${currentBuild.durationString}"
                echo "=========================================="
            }

            junit allowEmptyResults: true, testResults: "${env.SERVICE_NAME}/target/surefire-reports/*.xml"
            archiveArtifacts artifacts: "${env.SERVICE_NAME}/target/*.jar", allowEmptyArchive: true, fingerprint: true
        }

        success {
            echo "‚úÖ Build and tests succeeded!"
        }

        failure {
            echo "‚ùå Build or tests failed!"
        }
    }
}
