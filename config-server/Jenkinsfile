pipeline {
    agent any

    tools {
        jdk 'java17016'
        maven 'maven399'
    }

    environment {
        // üß© Variables principales del servicio
        SERVICE = 'config-server'
        IMAGE_BASE = "farmatodo/${SERVICE}"
        IMAGE_TAG = "${BUILD_NUMBER}"
        IMAGE = "${IMAGE_BASE}:${IMAGE_TAG}"
		IMAGE_NAME = "java-app"


        // ‚öôÔ∏è Configuraci√≥n de red y puertos locales
        PORT = '8888'
        HOST = '8889'
        NET = 'farmatodo-network'

        // üîç Herramientas y an√°lisis
        SONAR_SCANNER_HOME = tool 'sonar7'

        // ‚òÅÔ∏è Configuraci√≥n GCP / Artifact Registry
        GCP_PROJECT_ID = 'planar-momentum-469121-n0'
        REGION = 'us-central1'
        REPOSITORY = 'java-app-repo'
        FULL_IMAGE_NAME = "us-docker.pkg.dev/${GCP_PROJECT_ID}/${REPOSITORY}/${SERVICE}:${IMAGE_TAG}"
    }

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {

        // 1Ô∏è‚É£ CHECKOUT Y BUILD (sin imagen a√∫n)
        stage('Checkout & Build') {
            steps {
                echo "üì¶ Clonando repositorio desde GitHub..."
                checkout scmGit(
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: 'jenkins-gcp',
                        url: 'https://github.com/santgodev/farmatodo-backend.git'
                    ]]
                )

                dir(SERVICE) {
                    echo "üß± Compilando y empacando ${SERVICE}..."
                    sh 'mvn clean package -DskipTests=false'
                }
            }
        }

        // 2Ô∏è‚É£ AN√ÅLISIS EST√ÅTICO (SAST)
        stage('SonarQube Analysis') {
            steps {
                echo "üîç Ejecutando an√°lisis de c√≥digo con SonarQube..."
                dir(SERVICE) {
                    withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_TOKEN')]) {
                        withSonarQubeEnv('sonar') {
                            sh """
                                ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                                    -Dsonar.projectKey=${SERVICE} \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=http://sonarqube-dind:9000 \
                                    -Dsonar.java.binaries=target/classes \
                                    -Dsonar.token=$SONAR_TOKEN
                            """
                        }
                    }
                }
            }
        }

        // 3Ô∏è‚É£ AN√ÅLISIS DE DEPENDENCIAS Y FS (antes del build Docker)
        stage('Trivy Source Scan') {
            steps {
                echo "üß© Escaneando dependencias y archivos con Trivy..."
                dir(SERVICE) {
                    sh """
                        trivy fs . \
                            --format table \
                            --severity HIGH,CRITICAL \
                            -o trivy-fs-report.txt || true
                    """
                }
            }
        }

        // 4Ô∏è‚É£ CONSTRUCCI√ìN DE IMAGEN DOCKER
        stage('Build Docker Image') {
            steps {
                dir(SERVICE) {
                    echo "üê≥ Construyendo imagen Docker para ${SERVICE}..."
                    sh "docker build -t ${IMAGE} ."
                }
            }
        }

        // 5Ô∏è‚É£ AN√ÅLISIS DE IMAGEN DOCKER
        stage('Trivy Image Scan') {
            steps {
                echo "üîé Escaneando imagen Docker con Trivy..."
                sh """
                    trivy image ${IMAGE} \
                        --format table \
                        --severity HIGH,CRITICAL \
                        -o trivy-image-report.txt || true
                """
            }
        }

        // 6Ô∏è‚É£ AUTENTICACI√ìN Y PUSH A ARTIFACT REGISTRY
        stage('Authenticate with GCP, Tag & Push to Artifact Registry') {
            steps {
		echo 'Authenticate with GCP, tag and Push Image to Artifact Registry'
		withCredentials([file(credentialsId: 'gcp-credentials', variable: 'gcpCred')]) {
    			withEnv(["GOOGLE_APPLICATION_CREDENTIALS=$gcpCred"]) {
				sh '''
					echo Activating GCP service account...
                    			gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                    			gcloud config set project $GCP_PROJECT_ID
		       
                    			echo Configuring Docker to use gcloud credentials...
                    			gcloud auth configure-docker us-docker.pkg.dev --quiet
    				'''
				script {
					sh '''
						gcloud artifacts repositories create java-app-repo-${IMAGE_TAG} --repository-format=docker --location=us --description="Docker repository" --project=$GCP_PROJECT_ID
     					'''
					sh "docker tag ${IMAGE} ${FULL_IMAGE_NAME}"
					sh "docker push ${FULL_IMAGE_NAME}"
					echo "Image pushed to: ${FULL_IMAGE_NAME}"
				}
			}
		}
            }
        }

        // 7Ô∏è‚É£ DEPLOY LOCAL (solo pruebas o entorno dev)
        stage('Deploy') {
            steps {
                script {
                    echo "üöÄ Desplegando ${SERVICE} localmente..."
                    sh """
                        docker network inspect ${NET} >/dev/null 2>&1 || docker network create ${NET}
                        docker rm -f ${SERVICE} >/dev/null 2>&1 || true
                        docker run -d --name ${SERVICE} \
                            -p ${HOST}:${PORT} \
                            --network ${NET} \
                            ${IMAGE}
                    """
                    echo "‚úÖ ${SERVICE} desplegado correctamente!"
                    sh "docker ps --filter name=${SERVICE}"
                }
            }
        }
    }

    // üßæ Post-Actions
    post {
        success {
            echo "‚úÖ Build, an√°lisis y despliegue completados con √©xito para ${SERVICE}!"
        }
        failure {
            echo "‚ùå Fall√≥ el pipeline de ${SERVICE}!"
        }
        always {
            echo "=========================================="
            echo "Service: ${SERVICE}"
            echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
            echo "Duration: ${currentBuild.durationString}"
            echo "=========================================="

            archiveArtifacts artifacts: "${SERVICE}/target/*.jar", allowEmptyArchive: true, fingerprint: true
            archiveArtifacts artifacts: "**/trivy-*.txt", allowEmptyArchive: true
        }
    }
}
