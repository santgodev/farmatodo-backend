pipeline {
    agent any

    tools {
        jdk 'java17016'
        maven 'maven399'
    }

    environment {
        SERVICE = 'config-server'
        IMAGE   = "farmatodo/${SERVICE}:latest"
        PORT    = '8888'
        HOST    = '8889'
        NET     = 'farmatodo-network'
        SONAR_SCANNER_HOME = tool 'sonar7'
    }

    options {
        timestamps()
        timeout(time: 25, unit: 'MINUTES')
    }

    stages {

        // 1Ô∏è‚É£ CHECKOUT Y COMPILACI√ìN
        stage('Checkout & Build') {
            steps {
                echo "üì¶ Clonando repositorio desde GitHub..."
                checkout scmGit(
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: 'jenkins-gcp',
                        url: 'https://github.com/santgodev/farmatodo-backend.git'
                    ]]
                )

                dir(SERVICE) {
                    echo "üß± Compilando y empacando ${SERVICE}..."
                    sh 'mvn clean package -DskipTests=false'
                }
            }
        }

        // 2Ô∏è‚É£ AN√ÅLISIS DE C√ìDIGO (SonarQube)
        stage('SonarQube Analysis') {
            steps {
                echo "üîç Ejecutando an√°lisis de c√≥digo con SonarQube..."
                dir(SERVICE) {
                    withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_TOKEN')]) {
                        withSonarQubeEnv('sonar') {
                            sh """
                                ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                                    -Dsonar.projectKey=${SERVICE} \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=http://sonarqube-dind:9000 \
                                    -Dsonar.java.binaries=target/classes \
                                    -Dsonar.token=$SONAR_TOKEN
                            """
                        }
                    }
                }
            }
        }
        stage('Trivy FS Scan'){
            steps {
                echo 'Scanning File System with Trivy FS ...'
		sh 'trivy fs --format table -o FSScanReport.html'
            }
        }
        stage('Build & Tag Docker Image'){
            steps {
                echo 'Building the Java App Docker Image'
		script {
			sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
		}
            }
        }
        stage('Trivy Security Scan'){
            steps {
                echo 'Scanning Docker Image with Trivy'
		sh '''
  			trivy --severity HIGH,CRITICAL --cache-dir ${WORKSPACE}/.trivy-cache --no-progress --format table -o trivyFSScanReport.html image ${IMAGE_NAME}:${IMAGE_TAG}
     		'''
            }
        }
        // 6Ô∏è‚É£ DEPLOY FINAL
        stage('Deploy') {
            steps {
                script {
                    echo "üöÄ Desplegando ${SERVICE}..."
                    sh """
                        docker network inspect ${NET} >/dev/null 2>&1 || docker network create ${NET}
                        docker rm -f ${SERVICE} >/dev/null 2>&1 || true
                        docker run -d --name ${SERVICE} \
                            -p ${HOST}:${PORT} \
                            --network ${NET} \
                            ${IMAGE}
                    """
                    echo "‚úÖ ${SERVICE} desplegado correctamente!"
                    sh "docker ps --filter name=${SERVICE}"
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Build, an√°lisis y despliegue completados con √©xito para ${SERVICE}!"
        }
        failure {
            echo "‚ùå Fall√≥ el pipeline de ${SERVICE}!"
        }
        always {
            echo "=========================================="
            echo "Service: ${SERVICE}"
            echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
            echo "Duration: ${currentBuild.durationString}"
            echo "=========================================="

            // üì¶ Archivar artefactos importantes
            archiveArtifacts artifacts: "${SERVICE}/target/*.jar", allowEmptyArchive: true, fingerprint: true
            archiveArtifacts artifacts: "**/trivy-*.html", allowEmptyArchive: true
        }
    }
}
