pipeline {
    agent any

    tools {
        jdk 'java17016'
        maven 'maven399'
    }

    environment {
        SERVICE_NAME = 'config-server'
        PROJECT_NAME = 'farmatodo'
        IMAGE_NAME = "${PROJECT_NAME}/${SERVICE_NAME}:latest"
        NETWORK_NAME = 'farmatodo-network'
        HOST_PORT = '8889'      // host: puedes abrir http://localhost:8889
        CONTAINER_PORT = '8888' // dentro del contenedor
    }

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                dir("${env.SERVICE_NAME}") {
                    sh "mvn clean package -DskipTests=false"
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir("${env.SERVICE_NAME}") {
                    sh "docker build -t ${env.IMAGE_NAME} ."
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "üöÄ Deploying ${env.SERVICE_NAME}..."

                    // Crear red si no existe
                    sh """
                      docker network inspect ${NETWORK_NAME} >/dev/null 2>&1 || \
                      docker network create ${NETWORK_NAME}
                    """

                    // Borrar contenedor previo
                    sh "docker rm -f ${SERVICE_NAME} || true"

                    // Ejecutar contenedor
                    sh """
                      docker run -d --name ${SERVICE_NAME} \
                        -p ${HOST_PORT}:${CONTAINER_PORT} \
                        --network ${NETWORK_NAME} \
                        ${IMAGE_NAME}
                    """

                    // Esperar a que el servicio responda
                    echo "‚è≥ Checking health on http://localhost:${HOST_PORT}/actuator/health ..."
                    sh """
                      for i in {1..20}; do
                        sleep 3
                        if curl -sf http://localhost:${HOST_PORT}/actuator/health >/dev/null; then
                          echo "‚úÖ ${SERVICE_NAME} is healthy!"
                          exit 0
                        fi
                        echo "Waiting for service..."
                      done
                      echo "‚ùå ${SERVICE_NAME} did not start in time"
                      exit 1
                    """
                }
            }
        }
    }

    post {
        always {
            echo "=========================================="
            echo "Service: ${env.SERVICE_NAME}"
            echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
            echo "Duration: ${currentBuild.durationString}"
            echo "=========================================="
            junit allowEmptyResults: true, testResults: "${env.SERVICE_NAME}/target/surefire-reports/*.xml"
            archiveArtifacts artifacts: "${env.SERVICE_NAME}/target/*.jar", allowEmptyArchive: true, fingerprint: true
        }
        success {
            echo "‚úÖ Build succeeded and service deployed!"
        }
        failure {
            echo "‚ùå Build or deploy failed!"
        }
    }
}
