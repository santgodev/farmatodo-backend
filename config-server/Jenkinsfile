pipeline {
  agent any

  tools {
    jdk 'java17016'
    maven 'maven399'
  }

  environment {
    SERVICE      = 'config-server'
    IMAGE_BASE   = "farmatodo/${SERVICE}"
    IMAGE_TAG    = "${BUILD_NUMBER}"
    IMAGE        = "${IMAGE_BASE}:${IMAGE_TAG}"

    PORT         = '8888'     // Puerto interno del contenedor
    HOST         = '8889'     // Puerto expuesto localmente
    NET          = 'farmatodo-network'

    SONAR_SCANNER_HOME = tool 'sonar7'
  }

  options {
    timestamps()
    timeout(time: 20, unit: 'MINUTES')
  }

  stages {

    // 1Ô∏è‚É£ Checkout & Build (con tests)
    stage('Checkout & Build') {
      steps {
        echo "üì¶ Clonando repositorio desde GitHub..."
        checkout scmGit(
          branches: [[name: '*/main']],
          extensions: [],
          userRemoteConfigs: [[
            credentialsId: 'jenkins-gcp',
            url: 'https://github.com/santgodev/farmatodo-backend.git'
          ]]
        )

        dir(env.SERVICE) {
          echo "üß± Compilando y ejecutando tests de ${SERVICE}..."
          sh "mvn -q -Dstyle.color=always clean package -DskipTests=false"
        }
      }
    }

    // 2Ô∏è‚É£ SonarQube (SAST)
    stage('SonarQube Analysis') {
      steps {
        echo "üîç An√°lisis de calidad de c√≥digo (SonarQube)..."
        dir(env.SERVICE) {
          withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_TOKEN')]) {
            withSonarQubeEnv('sonar') {
              sh """
                ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                  -Dsonar.projectKey=${SERVICE} \
                  -Dsonar.sources=. \
                  -Dsonar.host.url=http://sonarqube-dind:9000 \
                  -Dsonar.java.binaries=target/classes \
                  -Dsonar.token=$SONAR_TOKEN
              """
            }
          }
        }
      }
    }

    // 3Ô∏è‚É£ Trivy Scan (antes del build Docker)
    stage('Trivy Source Scan') {
      steps {
        echo "üß© Escaneando vulnerabilidades en dependencias..."
        dir(env.SERVICE) {
          sh """
            trivy fs . \
              --format table \
              --severity HIGH,CRITICAL \
              -o trivy-fs-report.txt || true
          """
        }
      }
    }

    // 4Ô∏è‚É£ Docker Build
    stage('Build Docker Image') {
      steps {
        dir(env.SERVICE) {
          echo "üê≥ Construyendo imagen Docker de ${SERVICE}..."
          sh "docker build -t ${IMAGE} ."
        }
      }
    }

    // 5Ô∏è‚É£ Run Local Container
    stage('Run Locally in Docker') {
      steps {
        echo "üöÄ Iniciando ${SERVICE} en red local (${NET})..."
        sh """
          # Crear red si no existe
          docker network inspect ${NET} >/dev/null 2>&1 || docker network create ${NET}

          # Detener y eliminar contenedor previo si existe
          docker rm -f ${SERVICE} >/dev/null 2>&1 || true

          # Ejecutar el contenedor
          docker run -d \
            --name ${SERVICE} \
            --network ${NET} \
            -p ${HOST}:${PORT} \
            -e SPRING_APPLICATION_NAME=config-server \
            -e SERVER_PORT=${PORT} \
            -e SPRING_PROFILES_ACTIVE=dev \
            ${IMAGE}

          echo "‚úÖ ${SERVICE} levantado localmente en http://localhost:${HOST}"
        """
      }
    }

    // 6Ô∏è‚É£ Trivy Image Scan (despu√©s del build y run)
    stage('Trivy Image Scan') {
      steps {
        echo "üîé Escaneando vulnerabilidades en la imagen Docker..."
        sh """
          trivy image ${IMAGE} \
            --format table \
            --severity HIGH,CRITICAL \
            -o trivy-image-report.txt || true
        """
      }
    }
  }

  post {
    success {
      echo "‚úÖ Pipeline de QA y despliegue local completado para ${SERVICE}"
      echo "üåê Accede al Config Server: http://localhost:${HOST}/actuator/health"
    }
    failure {
      echo "‚ùå Fall√≥ el pipeline de ${SERVICE}"
    }
    always {
      echo "=========================================="
      echo "Service: ${SERVICE}"
      echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
      echo "Duration: ${currentBuild.durationString}"
      echo "=========================================="
      archiveArtifacts artifacts: "${SERVICE}/target/*.jar", allowEmptyArchive: true, fingerprint: true
      archiveArtifacts artifacts: "**/trivy-*.txt", allowEmptyArchive: true
    }
  }
}
