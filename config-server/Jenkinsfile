pipeline {
    agent any

    tools {
        jdk 'java17016'
        maven 'maven399'
    }

    environment {
        SERVICE_NAME   = 'config-server'
        PROJECT_NAME   = 'farmatodo'
        IMAGE_NAME     = "${PROJECT_NAME}/${SERVICE_NAME}:latest"
        NETWORK_NAME   = 'farmatodo-network'
        HOST_PORT      = '8889'
        CONTAINER_PORT = '8888'
    }

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {

        stage('Checkout') {
            steps {
                echo "üì¶ Cloning repository..."
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                dir("${SERVICE_NAME}") {
                    echo "üß™ Building and running tests..."
                    sh 'mvn clean package -DskipTests=false'
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir("${SERVICE_NAME}") {
                    echo "üê≥ Building Docker image..."
                    sh "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "üöÄ Deploying ${SERVICE_NAME}..."

                    // Create network if it doesn‚Äôt exist
                    sh "docker network inspect ${NETWORK_NAME} >/dev/null 2>&1 || docker network create ${NETWORK_NAME}"

                    // Remove previous container
                    sh "docker rm -f ${SERVICE_NAME} >/dev/null 2>&1 || true"

                    // Run new container
                    sh """
                        docker run -d --name ${SERVICE_NAME} \
                          -p ${HOST_PORT}:${CONTAINER_PORT} \
                          --network ${NETWORK_NAME} \
                          ${IMAGE_NAME}
                    """

                    echo "‚è≥ Waiting for ${SERVICE_NAME} to become healthy..."
                    sh '''
                        for i in $(seq 1 20); do
                            if curl -sf http://localhost:'${HOST_PORT}'/actuator/health >/dev/null; then
                                echo "‚úÖ Service is healthy!"
                                exit 0
                            fi
                            echo "‚è±Ô∏è Attempt $i: not ready yet..."
                            sleep 5
                        done
                        echo "‚ùå Service did not become healthy in time"
                        docker logs '${SERVICE_NAME}' | tail -n 20
                        exit 1
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "=========================================="
            echo "Service: ${SERVICE_NAME}"
            echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
            echo "Duration: ${currentBuild.durationString}"
            echo "=========================================="
            junit allowEmptyResults: true, testResults: "${SERVICE_NAME}/target/surefire-reports/*.xml"
            archiveArtifacts artifacts: "${SERVICE_NAME}/target/*.jar", allowEmptyArchive: true, fingerprint: true
        }
        success {
            echo "‚úÖ Build succeeded and service deployed!"
        }
        failure {
            echo "‚ùå Build or deploy failed!"
        }
    }
}
