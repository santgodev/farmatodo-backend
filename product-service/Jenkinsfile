pipeline {
    agent any

    tools {
        jdk 'java17016'
        maven 'maven399'
    }

    environment {
        SERVICE = 'product-service'
        IMAGE   = "farmatodo/${SERVICE}:latest"
        PORT    = '8083'
        HOST    = '8083'
        NET     = 'farmatodo-network'
    }

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
                echo "📦 Checking out source code..."
                checkout scm
            }
        }

        stage('Build & Package') {
            steps {
                dir(SERVICE) {
                    echo "🧱 Building ${SERVICE}..."
                    // Saltamos los tests por ahora para evitar fallos de conexión al config-server
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir(SERVICE) {
                    echo "🐳 Building Docker image for ${SERVICE}..."
                    sh "docker build -t ${IMAGE} ."
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "🚀 Deploying ${SERVICE}..."

                    // Aseguramos que la red Docker exista
                    sh """
                        docker network inspect ${NET} >/dev/null 2>&1 || docker network create ${NET}
                    """

                    // Eliminamos contenedor previo (si existe)
                    sh "docker rm -f ${SERVICE} >/dev/null 2>&1 || true"

                    // Desplegamos el nuevo contenedor
                    sh """
                        docker run -d --name ${SERVICE} \
                            -p ${HOST}:${PORT} \
                            --network ${NET} \
                            ${IMAGE}
                    """

                    echo "✅ ${SERVICE} deployed successfully!"
